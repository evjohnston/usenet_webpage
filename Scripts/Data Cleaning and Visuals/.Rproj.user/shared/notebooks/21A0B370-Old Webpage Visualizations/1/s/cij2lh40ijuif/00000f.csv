"0","quit"
"0","# Step 1: Calculate basic metadata for each author"
"0","metadata <- all_comments %>%"
"0","  group_by(Author) %>%"
"0","  summarize("
"0","    total_threads = n_distinct(Thread.ID),  # Count distinct threads per author"
"0","    total_comments = n(),  # Total number of comments made by the author"
"0","    threads_started = sum(Thread_Relative_CommentID == ""CM00001"", na.rm = TRUE),  # Number of threads started by the author"
"0","    .groups = 'drop'"
"0","  )"
"0",""
"0","# Step 2: Calculate comments per newsgroup for each author"
"0","comments_per_newsgroup <- all_comments %>%"
"0","  group_by(Author, newsgroup) %>%"
"0","  summarize(total_comments_in_newsgroup = n(), .groups = 'drop')"
"0",""
"0","# Step 3: Pivot the newsgroup data to wide format to create separate columns for each newsgroup"
"0","comments_per_newsgroup_wide <- comments_per_newsgroup %>%"
"0","  pivot_wider("
"0","    names_from = newsgroup,"
"0","    values_from = total_comments_in_newsgroup,"
"0","    values_fill = list(total_comments_in_newsgroup = 0)  # Fill missing values with 0"
"0","  )"
"0",""
"0","# Step 4: Merge the metadata with the wide format newsgroup data"
"0","metadata <- metadata %>%"
"0","  left_join(comments_per_newsgroup_wide, by = ""Author"")"
"0",""
"0","# Step 5: Calculate author influence based on the number of connections in the network"
"0","# Calculate the degree (number of connections) for each author in the graph"
"0","edges <- all_comments %>%"
"0","  filter(Thread.ID != """") %>%"
"0","  group_by(Thread.ID) %>%"
"0","  filter(n() > 1) %>%"
"0","  summarize(edgelist = list(combn(Author, 2, simplify = FALSE))) %>%"
"0","  unnest(edgelist) %>%"
"0","  unnest_wider(edgelist, names_sep = """") %>%"
"0","  rename(source = edgelist1, target = edgelist2) %>%"
"0","  filter(source != target) %>%"
"0","  group_by(source, target) %>%"
"0","  summarize(weight = n(), .groups = 'drop')"
"0",""
"0","# Create graph object"
"0","graph <- igraph::graph_from_data_frame(edges, directed = FALSE)"
"0",""
"0","# Calculate the degree for each author as their influence"
"0","author_influence <- data.frame("
"0","  Author = igraph::V(graph)$name,"
"0","  influence = igraph::degree(graph)"
"0",")"
"0",""
"0","# Step 6: Merge author influence into metadata"
"0","metadata <- metadata %>%"
"0","  left_join(author_influence, by = ""Author"")"
"0",""
"0","# Step 7: Perform community detection using Louvain algorithm"
"0","communities <- cluster_louvain(graph)"
"0","membership <- membership(communities)"
"0",""
"0","# Step 8: Create node_communities DataFrame"
"0","node_communities <- data.frame("
"0","  name = V(graph)$name,  # Node names (authors)"
"0","  community = membership  # Community assignment"
"0",")"
"0",""
"0","# Step 9: Sort the metadata DataFrame by total_comments in descending order"
"0","metadata <- metadata %>%"
"0","  arrange(desc(total_comments))"
"0",""
"0","# Preview the updated metadata dataframe"
"0","print(metadata)"
