"0","import seaborn as sns"
"0","import matplotlib.pyplot as plt"
"0","import pandas as pd"
"0","import os"
"0","from itertools import combinations"
"0",""
"0","def compare_topics_and_save(general_results_path, influential_results_path, output_dir):"
"0","    """""""
"0","    Compare topics between general and influential author analyses "
"0","    using Jaccard similarity and create visualizations."
"0","    """""""
"0","    print(""\nComparing topics with Jaccard similarity..."")"
"0","    "
"0","    # Load general and influential results from HTML"
"0","    general_results = pd.read_html(general_results_path)[0]"
"0","    influential_results = pd.read_html(influential_results_path)[0]"
"0","    "
"0","    # List to store topic similarity data"
"0","    topic_similarities = []"
"0","    "
"0","    # Calculate Jaccard similarity for all topic pairs"
"0","    for general_topic in range(1, len(general_results.columns) // 2 + 1):"
"0","        general_terms = set(general_results[f""Topic_{general_topic}_terms""].dropna())"
"0","        for influential_topic in range(1, len(influential_results.columns) // 2 + 1):"
"0","            influential_terms = set(influential_results[f""Topic_{influential_topic}_terms""].dropna())"
"0","            similarity = len(general_terms.intersection(influential_terms)) / len(general_terms.union(influential_terms))"
"0","            topic_similarities.append({"
"0","                'General_Topic': general_topic,"
"0","                'Influential_Topic': influential_topic,"
"0","                'Similarity': similarity"
"0","            })"
"0","            "
"0","    # Create similarity DataFrame"
"0","    comparison_df = pd.DataFrame(topic_similarities)"
"0","    similarity_matrix = comparison_df.pivot("
"0","        index='General_Topic',"
"0","        columns='Influential_Topic',"
"0","        values='Similarity'"
"0","    )"
"0","    "
"0","    # Reorder the similarity_matrix to reverse the order of General Topics"
"0","    similarity_matrix = similarity_matrix.iloc[::-1]  # Reverse the row order"
"0","    "
"0","    # Generate heatmap"
"0","    plt.figure(figsize=(10, 8))"
"0","    sns.heatmap(similarity_matrix, annot=True, fmt='.3f', cmap='YlOrRd', cbar_kws={'label': 'Jaccard Similarity'})"
"0","    plt.title('Topic Similarity Heatmap')"
"0","    plt.xlabel('Influential Topics')"
"0","    plt.ylabel('General Topics')"
"0","    "
"0","    # Save heatmap"
"0","    os.makedirs(output_dir, exist_ok=True)"
"0","    heatmap_path = os.path.join(output_dir, ""topic_similarity_heatmap.png"")"
"0","    plt.savefig(heatmap_path, dpi=300, bbox_inches='tight')"
"0","    plt.close()"
"0","    print(f""Heatmap saved to: {heatmap_path}"")"
"0","    "
"0","    # Find the best matches for general topics"
"0","    best_matches = []"
"0","    used_influential_topics = set()"
"0","    "
"0","    for general_topic in range(1, len(general_results.columns) // 2 + 1):"
"0","        topic_similarities = comparison_df[comparison_df['General_Topic'] == general_topic]"
"0","        remaining_similarities = topic_similarities[~topic_similarities['Influential_Topic'].isin(used_influential_topics)]"
"0","        "
"0","        if not remaining_similarities.empty:"
"0","            best_match = remaining_similarities.loc[remaining_similarities['Similarity'].idxmax()]"
"0","            best_matches.append({"
"0","                'General_Topic': general_topic,"
"0","                'Influential_Topic': int(best_match['Influential_Topic']),"
"0","                'Similarity': best_match['Similarity']"
"0","            })"
"0","            used_influential_topics.add(best_match['Influential_Topic'])"
"0","            "
"0","    best_matches_df = pd.DataFrame(best_matches)"
"0","    "
"0","    # Generate bar plot for best matches"
"0","    plt.figure(figsize=(12, 6))"
"0","    bars = plt.bar("
"0","        best_matches_df['Influential_Topic'], "
"0","        best_matches_df['Similarity'], "
"0","        color=[plt.cm.Set2(i / 7) for i in best_matches_df['General_Topic']]"
"0","    )"
"0","    "
"0","    # Add value labels to bars"
"0","    for bar in bars:"
"0","        height = bar.get_height()"
"0","        plt.text(bar.get_x() + bar.get_width() / 2., height,"
"0","                 f'{height:.2f}',"
"0","                 ha='center', va='bottom')"
"0","        "
"0","    # Customize bar plot"
"0","    plt.title('Best Topic Matches Between General and Influential Authors')"
"0","    plt.xlabel('Influential Topics')"
"0","    plt.ylabel('Jaccard Similarity')"
"0","    plt.ylim(0, max(best_matches_df['Similarity']) * 1.1)  # Add padding above highest bar"
"0","    "
"0","    # Add legend for general topics"
"0","    from matplotlib.patches import Patch"
"0","    legend_elements = ["
"0","        Patch(facecolor=plt.cm.Set2(i / 7), label=f'Topic {i}') "
"0","        for i in best_matches_df['General_Topic']"
"0","    ]"
"0","    plt.legend(handles=legend_elements, title='Matching General Topic', "
"0","               bbox_to_anchor=(1.05, 1), loc='upper left')"
"0","    "
"0","    # Save bar plot"
"0","    barplot_path = os.path.join(output_dir, ""topic_similarity_barplot.png"")"
"0","    plt.savefig(barplot_path, dpi=300, bbox_inches='tight')"
"0","    plt.close()"
"0","    print(f""Bar plot saved to: {barplot_path}"")"
"0","    "
"0","    # Save comparison DataFrame to CSV"
"0","    comparison_csv_path = os.path.join(output_dir, ""topic_similarity_comparison.csv"")"
"0","    comparison_df.to_csv(comparison_csv_path, index=False)"
"0","    print(f""Comparison data saved to: {comparison_csv_path}"")"
"0","    "
"0","    # Print similarity statistics"
"0","    print(""\nTopic Similarity Statistics:"")"
"0","    print(f""Average similarity: {comparison_df['Similarity'].mean():.3f}"")"
"0","    print(f""Maximum similarity: {comparison_df['Similarity'].max():.3f}"")"
"0","    print(f""Minimum similarity: {comparison_df['Similarity'].min():.3f}"")"
"0","    "
"0","    return comparison_df, best_matches_df"
"0","    "
"0","# Example usage"
"0","general_results_path = ""/Users/emerson/Github/usenet_webpage/Images and Tables/Tables/lda_analysis_all_comments.html"""
"0","influential_results_path = ""/Users/emerson/Github/usenet_webpage/Images and Tables/Tables/lda_analysis_influential_authors.html"""
"0","output_dir = ""/Users/emerson/Github/usenet_webpage/Images and Tables/Images"""
"0",""
"0","try:"
"0","    comparison_df, best_matches_df = compare_topics_and_save("
"0","        general_results_path, "
"0","        influential_results_path, "
"0","        output_dir"
"0","    )"
"0","    print(""\nJaccard Similarity Analysis Complete."")"
"0","    print(""\nBest Matches DataFrame:"")"
"0","    print(best_matches_df)"
"0","except Exception as e:"
"0","    print(f""An error occurred during topic comparison: {str(e)}"")"
"0",""
"1","
Comparing topics with Jaccard similarity...
"
"1","Heatmap saved to: /Users/emerson/Github/usenet_webpage/Images and Tables/Images/topic_similarity_heatmap.png
"
"1","Bar plot saved to: /Users/emerson/Github/usenet_webpage/Images and Tables/Images/topic_similarity_barplot.png
Comparison data saved to: /Users/emerson/Github/usenet_webpage/Images and Tables/Images/topic_similarity_comparison.csv

Topic Similarity Statistics:
Average similarity: 0.134
Maximum similarity: 0.481
Minimum similarity: 0.000

Jaccard Similarity Analysis Complete.

Best Matches DataFrame:
   General_Topic  Influential_Topic  Similarity
0              1                  6    0.379310
1              2                  7    0.333333
2              3                  1    0.481481
3              4                  4    0.379310
4              5                  5    0.379310
5              6                  2    0.052632
6              7                  3    0.081081
"
