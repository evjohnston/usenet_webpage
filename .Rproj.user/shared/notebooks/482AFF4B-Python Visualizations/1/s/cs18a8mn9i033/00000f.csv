"0","import pandas as pd"
"0","import matplotlib.pyplot as plt"
"0","import seaborn as sns"
"0",""
"0","def analyze_influential_distribution(dataset1_comments, influential_authors):"
"0","    """"""Analyze how influential authors participated across different newsgroups"""""""
"0","    "
"0","    # Filter for influential authors in the general dataset"
"0","    influential_comments = dataset1_comments[dataset1_comments['Author'].isin(influential_authors['Author'])]"
"0","    "
"0","    # Calculate distributions"
"0","    author_newsgroup_counts = influential_comments.groupby(['Author', 'newsgroup']).size().reset_index(name='comment_count')"
"0","    "
"0","    # Create pivot table for heatmap"
"0","    pivot_data = author_newsgroup_counts.pivot(index='Author', columns='newsgroup', values='comment_count')"
"0","    pivot_data = pivot_data.fillna(0)  # Replace NaN with 0 for cases where author didn't post in a newsgroup"
"0","    "
"0","    # Calculate percentage distribution for each author"
"0","    pivot_data_pct = pivot_data.div(pivot_data.sum(axis=1), axis=0) * 100"
"0","    "
"0","    # Sort authors by total number of comments"
"0","    total_comments = pivot_data.sum(axis=1)"
"0","    pivot_data_pct = pivot_data_pct.loc[total_comments.sort_values(ascending=False).index]"
"0","    "
"0","    # Create visualization"
"0","    plt.figure(figsize=(20, 20))"
"0","    "
"0","    # Create heatmap"
"0","    sns.heatmap(pivot_data_pct, "
"0","                annot=True, "
"0","                fmt='.1f',"
"0","                cmap='YlOrRd',"
"0","                cbar_kws={'label': 'Percentage of Author\'s Comments (%)'},"
"0","                vmin=0,"
"0","                vmax=100)"
"0","    "
"0","    plt.title('Distribution of Influential Authors\' Comments Across Newsgroups\n(General Usenet Dataset)',"
"0","              pad=20, fontsize=14)"
"0","    plt.ylabel('Author (Sorted by Total Comments)')"
"0","    plt.xlabel('Newsgroup')"
"0","    "
"0","    # Rotate x-axis labels for better readability"
"0","    plt.xticks(rotation=45, ha='right')"
"0","    plt.yticks(rotation=0)"
"0","    "
"0","    plt.tight_layout()"
"0","    plt.savefig('/Users/emerson/Github/usenet_webpage/Images and Tables/Images/influential_distribution.png', "
"0","                dpi=300, bbox_inches='tight')"
"0","    plt.close()"
"0","    "
"0","    # Create summary statistics"
"0","    summary_stats = {"
"0","        'Total Authors': len(pivot_data),"
"0","        'Most Active Newsgroup': pivot_data.sum().idxmax(),"
"0","        'Least Active Newsgroup': pivot_data.sum().idxmin(),"
"0","        'Most Prolific Author': total_comments.idxmax(),"
"0","        'Average Comments per Author': total_comments.mean(),"
"0","        'Median Comments per Author': total_comments.median(),"
"0","        'Authors with Cross-posting': (pivot_data > 0).sum(axis=1).value_counts()"
"0","    }"
"0","    "
"0","    return pivot_data, pivot_data_pct, summary_stats"
"0","    "
"0","# Run the analysis"
"0","pivot_data, pivot_data_pct, summary_stats = analyze_influential_distribution(dataset1_comments, influential_authors)"
"0",""
"0","# Print summary statistics"
"0","print(""\nSummary Statistics:"")"
"1","
Summary Statistics:
"
"0","print(""-"" * 50)"
"1","--------------------------------------------------
"
"0","print(f""Total Influential Authors: {summary_stats['Total Authors']}"")"
"1","Total Influential Authors: 20
"
"0","print(f""Most Active Newsgroup: {summary_stats['Most Active Newsgroup']}"")"
"1","Most Active Newsgroup: netmed
"
"0","print(f""Least Active Newsgroup: {summary_stats['Least Active Newsgroup']}"")"
"1","Least Active Newsgroup: netnews
"
"0","print(f""Most Prolific Author: {summary_stats['Most Prolific Author']}"")"
"1","Most Prolific Author: Steve Dyer
"
"0","print(f""Average Comments per Author: {summary_stats['Average Comments per Author']:.1f}"")"
"1","Average Comments per Author: 76.3
"
"0","print(f""Median Comments per Author: {summary_stats['Median Comments per Author']:.1f}"")"
"1","Median Comments per Author: 22.0
"
"0","print(""\nNumber of Authors by Newsgroups Posted In:"")"
"1","
Number of Authors by Newsgroups Posted In:
"
"0","print(summary_stats['Authors with Cross-posting'].sort_index().to_string())"
"1","2    4
3    2
4    6
5    4
6    4
"
