"0","import numpy as np"
"0","import networkx as nx"
"0","import matplotlib.pyplot as plt"
"0","from scipy.spatial import ConvexHull"
"0","import os"
"0","import seaborn as sns"
"0",""
"0","def create_static_network(doc_term_matrix, lda_model, vectorizer, output_path='topic_network_visualization.png'):"
"0","    """"""Create static co-occurrence network visualization with topic regions."""""""
"0","    print(""Creating static co-occurrence network..."")"
"0","    "
"0","    # Get the document-term matrix as array"
"0","    dtm_array = doc_term_matrix.toarray()"
"0","    co_occurrence = np.dot(dtm_array.T, dtm_array)  # Calculate co-occurrence matrix"
"0","    "
"0","    # Get term frequencies"
"0","    term_frequency = np.sum(dtm_array, axis=0)"
"0","    "
"0","    # Get feature names from the vectorizer"
"0","    feature_names = vectorizer.get_feature_names_out()"
"0","    "
"0","    # Get the top terms from LDA topics"
"0","    top_terms = []"
"0","    for topic_idx, topic in enumerate(lda_model.components_):"
"0","        top_terms.extend([feature_names[i] for i in topic.argsort()[-15:]])  # Top 15 terms for each topic"
"0","    top_terms = list(set(top_terms))"
"0","    "
"0","    # Filter terms in the co-occurrence matrix"
"0","    filtered_indices = [i for i, term in enumerate(feature_names) if term in top_terms]"
"0","    filtered_co_occurrence = co_occurrence[filtered_indices][:, filtered_indices]"
"0","    filtered_terms = [feature_names[i] for i in filtered_indices]"
"0","    "
"0","    # Create a graph using the filtered terms"
"0","    G = nx.Graph()"
"0","    "
"0","    # Add edges and nodes"
"0","    for i in range(len(filtered_terms)):"
"0","        for j in range(i + 1, len(filtered_terms)):"
"0","            weight = filtered_co_occurrence[i, j]"
"0","            if weight > 0:"
"0","                G.add_edge(filtered_terms[i], filtered_terms[j], weight=weight)"
"0","    "
"0","    # Set up the plot"
"0","    plt.figure(figsize=(20, 20), facecolor='white')"
"0","    "
"0","    # Layout for graph nodes"
"0","    pos = nx.spring_layout(G, seed=42)"
"0","    "
"0","    # Node sizes based on term frequencies"
"0","    node_sizes = [np.log1p(term_frequency[filtered_indices][i]) * 500 for i in range(len(filtered_terms))]"
"0","    "
"0","    # Get topic assignments for terms"
"0","    term_topic_assignment = []"
"0","    for term in filtered_terms:"
"0","        term_topics = []"
"0","        for topic_idx, topic in enumerate(lda_model.components_):"
"0","            if term in [feature_names[i] for i in topic.argsort()[-15:]]:"
"0","                term_topics.append((topic_idx, topic[feature_names.tolist().index(term)]))"
"0","        if term_topics:"
"0","            term_topic_assignment.append(max(term_topics, key=lambda x: x[1])[0])"
"0","        else:"
"0","            term_topic_assignment.append(0)"
"0","    "
"0","    # Draw nodes and edges"
"0","    edge_weights = [G[u][v]['weight'] for u, v in G.edges()]"
"0","    max_edge_weight = max(edge_weights) if edge_weights else 1"
"0","    edge_widths = [0.3 + (w / max_edge_weight) for w in edge_weights]"
"0","    "
"0","    nx.draw_networkx_edges(G, pos, alpha=0.2, width=edge_widths, edge_color='gray')"
"0","    "
"0","    colors = sns.color_palette(""Set2"", len(lda_model.components_))"
"0","    for topic in range(len(lda_model.components_)):"
"0","        topic_nodes = [filtered_terms[i] for i, t in enumerate(term_topic_assignment) if t == topic]"
"0","        nx.draw_networkx_nodes("
"0","            G, pos, nodelist=topic_nodes, "
"0","            node_color=[colors[topic]] * len(topic_nodes), "
"0","            node_size=[node_sizes[i] for i, t in enumerate(term_topic_assignment) if t == topic], "
"0","            alpha=0.8"
"0","        )"
"0","    "
"0","    # Draw labels"
"0","    nx.draw_networkx_labels(G, pos, font_size=10, font_weight='bold', alpha=0.9)"
"0","    "
"0","    # Add legend"
"0","    legend_elements = ["
"0","        plt.Line2D([0], [0], marker='o', color='w', label=f'Topic {i+1}', "
"0","                   markerfacecolor=colors[i], markersize=15)"
"0","        for i in range(len(lda_model.components_))"
"0","    ]"
"0","    plt.legend(handles=legend_elements, loc='upper right', title='Topics')"
"0","    "
"0","    # Save the visualization"
"0","    plt.title(""Topic Co-occurrence Network"", fontsize=16)"
"0","    plt.axis('off')"
"0","    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white')"
"0","    plt.close()"
"0","    print(f""Co-occurrence network saved to {output_path}."")"
"0","    "
"0","    return G"
"0","    "
"0","# Call the function"
"0","output_path = os.path.join(output_directory, ""Images and Tables/Images/cooccurrence_network.png"")"
"0","try:"
"0","    print(""Generating the co-occurrence network..."")"
"0","    G = create_static_network("
"0","        doc_term_matrix=dataset2_matrix,  # Replace with dataset3_matrix for Dataset 3"
"0","        lda_model=lda_dataset2,          # Replace with lda_dataset3 for Dataset 3"
"0","        vectorizer=dataset2_vectorizer,  # Replace with dataset3_vectorizer for Dataset 3"
"0","        output_path=output_path"
"0","    )"
"0","    print(""Co-occurrence network generation complete!"")"
"0","except Exception as e:"
"0","    print(f""An error occurred: {e}"")"
"0",""
"1","Generating the co-occurrence network...
Creating static co-occurrence network...
"
"1","Co-occurrence network saved to /Users/emerson/Github/usenet_webpage/Images and Tables/Images/cooccurrence_network.png.
Co-occurrence network generation complete!
"
