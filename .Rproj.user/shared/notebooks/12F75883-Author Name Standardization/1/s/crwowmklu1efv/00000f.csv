"0","reticulate::repl_python()"
"0","import os"
"0","import pandas as pd"
"0","import re"
"0",""
"0","# Directories"
"0","output_directory = ""/Users/emerson/Github/usenet_webpage"""
"0","threads_directory = os.path.join(output_directory, ""CSV Files/Threads"")"
"0","comments_directory = os.path.join(output_directory, ""CSV Files/Comments"")"
"0",""
"0","# Load cleaned datasets"
"0","all_threads = pd.read_csv(os.path.join(threads_directory, ""combined_threads.csv""))"
"0","all_comments = pd.read_csv(os.path.join(comments_directory, ""combined_comments.csv""))"
"0",""
"0","# Step 1: Filter Authors that are not proper names"
"0","# Criteria: Contains non-alphabetic characters excluding hyphen ""-"" and dot ""."""
"0","non_name_pattern = r""[^A-Za-z\s\-.]""  # Matches any non-alphabetic character except spaces, hyphens, and dots"
"0","filtered_authors = all_comments[all_comments['Author'].str.contains(non_name_pattern, na=False, regex=True)]"
"0",""
"0","# Step 2: Extract potential full names from the Full.Text"
"0","def extract_real_name(full_text):"
"0","    if not isinstance(full_text, str):"
"0","        return None"
"0","    name_pattern = r""[-–—]? *(by|from)? *([A-Z][a-z]+(?: [A-Z][a-z]+)+)$"""
"0","    match = re.search(name_pattern, full_text)"
"0","    if match:"
"0","        return match.group(2)"
"0","    return None"
"0","    "
"0","filtered_authors.loc[:, 'Extracted_Real_Name'] = filtered_authors['Full.Text'].apply(extract_real_name)"
"2","<string>:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
"
"0","# Filter rows where a real name was successfully extracted"
"0","filtered_with_real_names = filtered_authors[filtered_authors['Extracted_Real_Name'].notnull()]"
"0",""
"0","# Step 3: Create a mapping of ""Author"" to ""Extracted_Real_Name"""
"0","author_name_mapping = filtered_with_real_names.set_index('Author')['Extracted_Real_Name'].to_dict()"
"0",""
"0","# Add manual mappings for stragglers"
"0","manual_mappings = {"
"0","    ""wer...@aecom.uucp"": ""Craig Werner"","
"0","    ""mi...@tekecs.uucp"": ""Mike Sellers"","
"0","    ""#D.ANDERSON"": ""Dave Anderson"","
"0","    ""SEVENER"": ""Tim Sevener"","
"0","    ""The Polymath"": ""Jerry Hollombe"","
"0","    ""fau...@ucbcad.uucp"": ""Wayne A. Christopher"","
"0","    ""bi...@persci.uucp"": ""Bill Swan"","
"0","    ""pam pincha"": ""Pam Pincha"","
"0","    ""stephanie da silva"": ""Stephanie Da Silva"","
"0","    ""JB"": ""Beth Christy"""
"0","    # Add additional mappings here"
"0","}"
"0","author_name_mapping.update(manual_mappings)"
"0",""
"0","# Step 4: Create the new DataFrame all_comments_AS"
"0","all_comments_AS = all_comments.copy()"
"0",""
"0","# Rename the current 'Author' column to 'Original_Username'"
"0","all_comments_AS.rename(columns={'Author': 'Original_Username'}, inplace=True)"
"0",""
"0","# Replace 'Author' with the standardized author names"
"0","all_comments_AS['Author'] = all_comments_AS['Original_Username'].map(author_name_mapping).fillna(all_comments_AS['Original_Username'])"
"0",""
"0","# Define the desired column order"
"0","column_order = ["
"0","    ""Thread.ID"","
"0","    ""Comment.ID"","
"0","    ""Unique.Comment.ID"","
"0","    ""Author"","
"0","    ""Date.and.Time"","
"0","    ""Full.Text"","
"0","    ""URL.String"","
"0","    ""newsgroup"","
"0","    ""Original_Username"""
"0","]"
"0",""
"0","# Reorder the DataFrame columns"
"0","all_comments_AS = all_comments_AS[column_order]"
"0",""
"0","# Display the first few rows to verify the column order"
"0","print(all_comments_AS.head())"
"1","  Thread.ID Comment.ID  ... newsgroup  Original_Username
0   TH01442    CM00001  ...    netmed  mi...@tekecs.uucp
1   TH01441    CM00001  ...    netmed  wer...@aecom.uucp
2   TH01440    CM00001  ...    netmed  wer...@aecom.uucp
3   TH01439    CM00001  ...    netmed  wer...@aecom.uucp
4   TH01439    CM00002  ...    netmed       Hank Buurman

[5 rows x 9 columns]
"
"0","# Verify that the mapping was applied"
"0","print(f""Number of authors standardized: {len(all_comments_AS[all_comments_AS['Author'] != all_comments_AS['Original_Username']])}"")"
"1","Number of authors standardized: 5317
"
"0","# Step 5: Identify entries with authors still containing weird characters"
"0",""
"0","# Define a regex pattern for valid names:"
"0","# - Firstname"
"0","# - Firstname Lastname"
"0","# - Firstname Middlename Lastname"
"0","# - Firstname MiddleInitial Lastname"
"0","valid_name_pattern = r""^[A-Z][a-z]+(?: [A-Z][a-z]+| [A-Z]\.)?(?: [A-Z][a-z]+)?$"""
"0",""
"0","# Identify entries where Author contains weird characters but exclude valid names"
"0","still_nonstandard_name = all_comments_AS["
"0","    all_comments_AS['Author'].str.contains(non_name_pattern, na=False, regex=True) &"
"0","    ~all_comments_AS['Author'].str.match(valid_name_pattern, na=False)"
"0","]"
"0",""
"0","# Display the number of entries and a sample of the still_nonstandard_name dataset"
"0","print(f""Number of entries with still weird authors: {len(still_nonstandard_name)}"")"
"1","Number of entries with still weird authors: 8157
"
"0","print(still_nonstandard_name.head())"
"1","    Thread.ID Comment.ID  ... newsgroup                 Original_Username
47    TH01433    CM00038  ...    netmed              Gabor Fencsik@ex2642
68    TH01432    CM00003  ...    netmed  Rob Vetter;1044;92-725;LP=A;60YB
99    TH01417    CM00001  ...    netmed              Alan T. Bowler [SDG]
114   TH01407    CM00001  ...    netmed         Tom Slone [(415)486-5954]
127   TH01405    CM00001  ...    netmed                ki...@kestrel.uucp

[5 rows x 9 columns]
"
"0","# Save still_nonstandard_name to CSV (optional)"
"0","still_nonstandard_name_output_path = os.path.join(comments_directory, ""still_nonstandard_name.csv"")"
"0","still_nonstandard_name.to_csv(still_nonstandard_name_output_path, index=False)"
"0","print(f""Still weird authors saved to: {still_nonstandard_name_output_path}"")"
"1","Still weird authors saved to: /Users/emerson/Github/usenet_webpage/CSV Files/Comments/still_nonstandard_name.csv
"
