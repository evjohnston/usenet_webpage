---
title: "Author Name Standardization"
author: "Emerson Johnston"
lastmodifeddate: "2024-11-17"
output:
  pdf_document: default
  html_document:
    df_print: paged
---

```{python}
import os
import pandas as pd
import re

# Directories
output_directory = "/Users/emerson/Github/usenet_webpage"
threads_directory = os.path.join(output_directory, "CSV Files/Threads")
comments_directory = os.path.join(output_directory, "CSV Files/Comments")

# Load cleaned datasets
all_threads = pd.read_csv(os.path.join(threads_directory, "combined_threads.csv"))
all_comments = pd.read_csv(os.path.join(comments_directory, "combined_comments.csv"))

# Step 1: Filter Authors that are not proper names
# Criteria: Contains non-alphabetic characters excluding hyphen "-" and dot "."
non_name_pattern = r"[^A-Za-z\s\-.]"  # Matches any non-alphabetic character except spaces, hyphens, and dots
filtered_authors = all_comments[all_comments['Author'].str.contains(non_name_pattern, na=False, regex=True)]

# Step 2: Extract potential full names from the Full.Text
def extract_real_name(full_text):
    if not isinstance(full_text, str):
        return None
    name_pattern = r"[-–—]? *(by|from)? *([A-Z][a-z]+(?: [A-Z][a-z]+)+)$"
    match = re.search(name_pattern, full_text)
    if match:
        return match.group(2)
    return None

filtered_authors.loc[:, 'Extracted_Real_Name'] = filtered_authors['Full.Text'].apply(extract_real_name)

# Filter rows where a real name was successfully extracted
filtered_with_real_names = filtered_authors[filtered_authors['Extracted_Real_Name'].notnull()]

# Step 3: Create a mapping of "Author" to "Extracted_Real_Name"
author_name_mapping = filtered_with_real_names.set_index('Author')['Extracted_Real_Name'].to_dict()

# Add manual mappings for stragglers
manual_mappings = {
    "wer...@aecom.uucp": "Craig Werner",
    "mi...@tekecs.uucp": "Mike Sellers",
    "#D.ANDERSON" : "Dave Anderson",
    "SEVENER" : "Tim Sevener",
    "The Polymath" : "Jerry Hollombe",
    "fau...@ucbcad.uucp" : "Wayne A. Christopher",
    "bi...@persci.uucp" : "Bill Swan",
    "pam pincha" : "Pam Pincha",
    "stephanie da silva" : "Stephanie Da Silva",
    "JB" : "Beth Christy"
    # Add additional mappings here
}
author_name_mapping.update(manual_mappings)

# Step 4: Create the new DataFrame all_comments_AS
all_comments_AS = all_comments.copy()

# Rename the current 'Author' column to 'Original_Username'
all_comments_AS.rename(columns={'Author': 'Original_Username'}, inplace=True)

# Replace 'Author' with the standardized author names
all_comments_AS['Author'] = all_comments_AS['Original_Username'].map(author_name_mapping).fillna(all_comments_AS['Original_Username'])

# Define the desired column order
column_order = [
    "Thread.ID",
    "Comment.ID",
    "Unique.Comment.ID",
    "Author",
    "Date.and.Time",
    "Full.Text",
    "URL.String",
    "newsgroup",
    "Original_Username"
]

# Reorder the DataFrame columns
all_comments_AS = all_comments_AS[column_order]

# Display the first few rows to verify the column order
print(all_comments_AS.head())

# Verify that the mapping was applied
print(f"Number of authors standardized: {len(all_comments_AS[all_comments_AS['Author'] != all_comments_AS['Original_Username']])}")
```

```{python}
# Define a regex pattern for "weird" characters (non-alphabetic excluding hyphen and dot)
weird_characters_pattern = r"[^A-Za-z\s\-.]"

# Filter authors that match the pattern
authors_with_weird_chars = all_comments_AS[all_comments_AS['Author'].str.contains(weird_characters_pattern, na=False, regex=True)]

# Extract unique authors for manual review
author_manual_review = authors_with_weird_chars[['Author']].drop_duplicates().reset_index(drop=True)

# Display the result
print(f"Number of authors with weird characters: {len(author_manual_review)}")
print(author_manual_review)

# Step 1: Define a function to extract valid names from the Author column
def extract_clean_name(author):
    """
    Extracts a name from the author string if it matches a valid name pattern.
    Assumes names are in the format of 'Firstname Lastname' or 'Firstname'.
    """
    if not isinstance(author, str):
        return None
    # Regex to match a valid name pattern
    name_pattern = r"([A-Z][a-z]+(?: [A-Z][a-z]+)?)"  # Matches 'Firstname' or 'Firstname Lastname'
    match = re.search(name_pattern, author)
    if match:
        return match.group(1)  # Return the extracted name
    return None

# Step 2: Apply the function to create a new column for cleaned names
all_comments_AS['Extracted_Name'] = all_comments_AS['Author'].apply(extract_clean_name)

# Step 3: Create a mapping of original author to extracted name
name_mapping = all_comments_AS[all_comments_AS['Extracted_Name'].notnull()][['Author', 'Extracted_Name']].drop_duplicates()

# Step 4: Update the Author column in all_comments_AS with extracted names where available
all_comments_AS['Author'] = all_comments_AS['Author'].map(name_mapping.set_index('Author')['Extracted_Name']).fillna(all_comments_AS['Author'])

# Step 5: Drop the temporary Extracted_Name column (optional)
all_comments_AS.drop(columns=['Extracted_Name'], inplace=True)

# Display the first few rows to verify changes
print(all_comments_AS.head())
```

```{python}
import re

# Step 1: Define a function to extract a full name from Full.Text if the Author has only one name
def find_full_name(author, full_text):
    """
    Searches for the last name in Full.Text when the Author column contains only one name.
    """
    if not isinstance(author, str) or not isinstance(full_text, str):
        return None

    # Escape special characters in the Author name
    escaped_author = re.escape(author)

    # Check if the Author has only one word (a single name)
    if len(author.split()) == 1:
        # Regex to find potential full names (e.g., "Firstname Lastname")
        name_pattern = rf"\b{escaped_author} [A-Z][a-z]+\b"  # Matches 'Firstname Lastname'
        match = re.search(name_pattern, full_text)
        if match:
            return match.group(0)  # Return the full name (Firstname Lastname)

    # Return None if no full name is found
    return None

# Step 2: Apply the function to find full names in the Full.Text column
all_comments_AS['Possible_Full_Name'] = all_comments_AS.apply(
    lambda row: find_full_name(row['Author'], row['Full.Text']), axis=1
)

# Step 3: Map found full names back to the Author column
all_comments_AS['Author'] = all_comments_AS['Possible_Full_Name'].fillna(all_comments_AS['Author'])

# Step 4: Drop the temporary Possible_Full_Name column (optional)
if 'Possible_Full_Name' in all_comments_AS.columns:
    all_comments_AS.drop(columns=['Possible_Full_Name'], inplace=True)

# Display the first few rows to verify changes
print(all_comments_AS.head())

# Count how many authors were updated
updated_authors_count = (all_comments_AS['Author'] != all_comments_AS['Original_Username']).sum()
print(f"Number of authors updated with full names: {updated_authors_count}")
```

```{python}
# Define the output file path
output_file_path = os.path.join(comments_directory, "combined_comments_AS.csv")

# Save the DataFrame to the specified CSV file
all_comments_AS.to_csv(output_file_path, index=False)

# Confirm the save location
print(f"DataFrame saved to: {output_file_path}")
```